SchemaComments 
==========

schema_commentsプラグインを使うと、テーブルとカラムにコメントを記述することができます。

 class CreateProducts < ActiveRecord::Migration
   def self.up
     create_table "products", :comment => '商品' do |t|
       t.string   "product_type_cd", :comment => '種別コード'
       t.integer  "price", :comment => "価格"
       t.string   "name", :comment => "商品名"
       t.datetime "created_at", :comment => "登録日時"
       t.datetime "updated_at", :comment => "更新日時"
     end
   end

   def self.down
     drop_table "products"
   end
 end

こんな感じ。

でこのようなマイグレーションを実行すると、db/schema.rb には、
コメントが設定されているテーブル、カラムは以下のように出力されます。

ActiveRecord::Schema.define(:version => 0) do
  create_table "products", :force => true, :comment => '商品' do |t|
    t.string   "product_type_cd", :comment => '種別コード'
    t.integer  "price", :comment => "価格"
    t.string   "name", :comment => "商品名"
    t.datetime "created_at", :comment => "登録日時"
    t.datetime "updated_at", :comment => "更新日時"
  end
end


コメントは、以下のメソッドで使用することが可能です。

columns, create_table, drop_table, rename_table
remove_column, add_column, change_column


== コメントはどこに保存されるのか ==
db/schema_comments.yml にYAML形式で保存されます。
あまり推奨しませんが、もしマイグレーションにコメントを記述するのを忘れてしまった場合、db/schema_comments.yml
を直接編集した後、rake db:schema:dumpやマイグレーションを実行すると、db/schema.rbのコメントに反映されます。


== MySQLのビュー ==
MySQLのビューを使用した場合、元々MySQLではSHOW TABLES でビューも表示してしまうため、
ビューはテーブルとしてSchemaDumperに認識され、development環境ではMySQLのビューとして作成されているのに、
test環境ではテーブルとして作成されてしまい、テストが正しく動かないことがあります。
これを避けるため、schema_commentsでは、db/schema.rbを出力する際、テーブルに関する記述の後に、CREATE VIEWを行う記述を追加します。


== annotate_models ==
rake db:annotate で以下のようなコメントを、モデル、テスト、フィクスチャといったモデルに関係の強いファイルの
先頭に追加します。
  # == Schema Info ==
  # 
  # Schema version: 20090721185959
  #
  # Table name: books # 書籍
  #
  #  id         :integer         not null, primary key
  #  title      :string(100)     not null               # タイトル
  #  size       :integer         not null, default(1)   # 判型
  #  price      :decimal(17, 14) not null, default(0.0) # 価格
  #  created_at :datetime                               # 登録日時
  #  updated_at :datetime                               # 更新日時
  # 
  # =================
  # 

また、rake db:updateで、rake db:migrateとrake db:annotateを実行します。

annotate_modelsは、達人プログラマーのDave Thomasさんが公開しているプラグインです。
http://repo.pragprog.com/svn/Public/plugins/annotate_models/

本プラグインでは、それを更に拡張したDave Boltonさんのプラグイン(
http://github.com/rotuka/annotate_models)をベースに拡張を加えています。


Copyright (c) 2008 Takeshi AKIMA, released under the Ruby License
